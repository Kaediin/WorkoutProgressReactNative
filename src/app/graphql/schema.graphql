type CognitoUser {
  email: String!
  family_name: String!
  gender: String!
  given_name: String!
  locale: String!
  name: String!
  nickname: String!
  zoneinfo: String!
}

type Exercise {
  defaultAppliedWeight: WeightValue
  id: ID!
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
  user: User
}

input ExerciseInput {
  defaultAppliedWeight: WeightValueInput
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
}

type ExerciseLog {
  exercise: Exercise!
  id: ID!
  logDateTime: LocalDateTime!
  remark: String
  repetitions: Float!
  unit: WeightUnit! @deprecated
  user: User!
  warmup: Boolean
  weightLeft: Float! @deprecated
  weightRight: Float! @deprecated
  weightValueLeft: WeightValue!
  weightValueRight: WeightValue!
}

input ExerciseLogInput {
  exerciseId: String!
  remark: String
  repetitions: Float!
  warmup: Boolean!
  weightLeft: WeightValueInput!
  weightRight: WeightValueInput!
  zonedDateTimeString: String!
}

type GroupedExerciseLog {
  exercise: Exercise!
  logs: [ExerciseLog!]!
}

scalar LocalDateTime

enum MuscleGroup {
  ABDUCTOR
  ABS
  ADDUCTOR
  BACK_SHOULDERS
  BICEPS
  CALVES
  CHEST
  FOREARMS
  FRONT_SHOULDERS
  GLUTES
  HAMSTRINGS
  HANDS
  LATS
  LOWER_BACK
  NECK
  OBLIQUES
  QUADS
  SHINS
  TRICEPS
  UPPER_BACK
}

type Mutation {
  addExerciseLog(autoAdjust: Boolean!, input: ExerciseLogInput!, workoutId: ID!): Workout
  createExercise(input: ExerciseInput): Exercise
  createUser(userInput: UserInput!): User
  deleteExercise(id: ID!): Boolean!
  deleteWorkout(id: ID!): Boolean
  endWorkout(workoutId: ID!, zonedDateTimeString: String!): Workout
  meStartWorkout(input: WorkoutInput!): Workout
  removeExerciseLog(autoAdjust: Boolean!, exerciseLogId: String!): Boolean!
  runFetchWorkoutsTask: Boolean
  updateExercise(id: ID!, input: ExerciseInput): Exercise
  updateExerciseLog(exerciseLogId: ID!, input: ExerciseLogInput!): Workout
  updateMyPreference(input: PreferenceInput!): Preference!
}

type Preference {
  autoAdjustWorkoutMuscleGroups: Boolean
  defaultRepetitions: Int
  hideUnitSelector: Boolean
  unit: WeightUnit
}

input PreferenceInput {
  autoAdjustWorkoutMuscleGroups: Boolean
  defaultRepetitions: Int
  hideUnitSelector: Boolean
  unit: WeightUnit
}

type Query {
  latestLogByExerciseId(exerciseId: ID!): ExerciseLog
  me: User
  meHasActiveWorkout: Boolean!
  myExercises: [Exercise!]
  myPreference: Preference
  myWorkouts: [Workout!]
  userById(id: String!): User
  users: [User]
  workoutById(id: ID!): Workout
}

type User {
  cognitoUser: CognitoUser!
  fid: String!
  id: ID!
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  middleName: String!
  password: String!
}

enum WeightUnit {
  KG
  LBS
}

type WeightValue {
  baseWeight: Int!
  fraction: Int
  unit: WeightUnit!
}

input WeightValueInput {
  baseWeight: Int!
  fraction: Int
  unit: WeightUnit!
}

type Workout {
  active: Boolean
  endDateTime: LocalDateTime
  exerciseLogs: [ExerciseLog!]!
  groupedExerciseLogs: [GroupedExerciseLog!]!
  id: ID!
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  startDateTime: LocalDateTime
}

input WorkoutInput {
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  zonedDateTime: String!
}

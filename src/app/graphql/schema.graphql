"""Indicates an Input Object is a OneOf Input Object."""
directive @oneOf on INPUT_OBJECT

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type CognitoUser {
  email: String!
  family_name: String!
  gender: String!
  given_name: String!
  locale: String!
  name: String!
  nickname: String!
  zoneinfo: String!
}

type Exercise {
  defaultAppliedWeight: LogValue
  id: ID!
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
  user: User
}

input ExerciseInput {
  defaultAppliedWeight: LogValueInput
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
}

type ExerciseLog {
  exercise: Exercise!
  id: ID!
  logDateTime: LocalDateTime!
  logValue: LogValue!
  remark: String
  repetitions: Float!
  user: User!
  warmup: Boolean
}

input ExerciseLogInput {
  exerciseId: String!
  logValue: LogValueInput!
  remark: String
  repetitions: Float!
  warmup: Boolean!
  zonedDateTimeString: String!
}

type GroupedExerciseLog {
  exercise: Exercise!
  logs: [ExerciseLog!]!
}

"""A Java LocalDateTime type"""
scalar LocalDateTime

enum LogUnit {
  KG
  KM
  LBS
  MI
}

type LogValue {
  base: Int!
  fraction: Int
  unit: LogUnit!
}

input LogValueInput {
  base: Int!
  fraction: Int
  unit: LogUnit!
}

enum MuscleGroup {
  ABDUCTOR
  ABS
  ADDUCTOR
  BACK_SHOULDERS
  BICEPS
  CALVES
  CHEST
  FOREARMS
  FRONT_SHOULDERS
  GLUTES
  HAMSTRINGS
  HANDS
  LATS
  LOWER_BACK
  NECK
  OBLIQUES
  QUADS
  SHINS
  TRICEPS
  UPPER_BACK
}

type MuscleGroupChartData {
  color: String!
  count: Int!
  muscleGroup: MuscleGroup!
}

type Mutation {
  addExerciseLog(autoAdjust: Boolean!, input: ExerciseLogInput!, workoutId: ID!): Workout
  createExercise(input: ExerciseInput): Exercise
  createUser(userInput: UserInput!): User
  deleteExercise(id: ID!): Boolean!

  """Delete workout by ID"""
  deleteWorkout(id: ID!): Boolean

  """End workout by ID"""
  endWorkout(workoutId: ID!, zonedDateTimeString: String!): Workout

  """Start a new workout for me"""
  meStartWorkout(input: WorkoutInput!): Workout
  reLogLatestLog(autoAdjust: Boolean!, workoutId: ID!, zonedDateTimeString: String!): Workout
  reLogLog(input: ExerciseLogInput!, workoutId: ID!): Workout
  removeExerciseLog(autoAdjust: Boolean!, exerciseLogId: String!): Boolean!

  """
  Restart workout by ID. This only removes end date and set active to false
  """
  restartWorkout(id: ID!): Workout!
  runFetchWorkoutsTask: Boolean
  updateExercise(id: ID!, input: ExerciseInput): Exercise
  updateExerciseLog(exerciseLogId: ID!, input: ExerciseLogInput!): Workout
  updateMyPreference(input: PreferenceInput!): Preference!

  """Update workout by ID"""
  updateWorkout(id: ID!, input: WorkoutInput!): Workout!
}

type Preference {
  autoAdjustWorkoutMuscleGroups: Boolean
  autoStartTimer: Boolean
  defaultRepetitions: Int
  distanceUnit: LogUnit
  hideUnitSelector: Boolean
  playTimerCompletionSound: Boolean
  timerDuration: Int
  weightUnit: LogUnit
}

input PreferenceInput {
  autoAdjustWorkoutMuscleGroups: Boolean
  autoStartTimer: Boolean
  defaultRepetitions: Int
  distanceUnit: LogUnit
  hideUnitSelector: Boolean
  playTimerCompletionSound: Boolean
  timerDuration: Int
  weightUnit: LogUnit
}

type Query {
  """Get chart data per muscle group"""
  chartDataMuscleGroups: [MuscleGroupChartData!]!

  """Count my workouts"""
  countMyWorkouts: Int!

  """Get total time of all workouts"""
  countTotalTimeAllMyWorkoutsInMinutes: Float!
  latestLogsByExerciseId(exerciseId: ID!): [ExerciseLog]
  latestLogsByExerciseIdAndNotWorkoutId(exerciseId: ID!, workoutId: String!): [ExerciseLog]
  me: User

  """Check if me has an active workout ie. one that hasn't ended yet"""
  meHasActiveWorkout: Boolean!
  myExercises: [Exercise!]
  myPreference: Preference

  """Fetch all my current workouts"""
  myWorkouts: [Workout!]
  userById(id: String!): User
  users: [User]

  """Fetch workout by ID"""
  workoutById(id: ID!): Workout

  """Fetch all workouts of user by current month with given timestamp"""
  workoutsOfCurrentMonth(zonedDateTimeString: String!): [Workout!]!
}

type User {
  cognitoUser: CognitoUser!
  fid: String!
  id: ID!
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  middleName: String!
  password: String!
}

type Workout {
  active: Boolean
  endDateTime: LocalDateTime
  exerciseLogs: [ExerciseLog!]!
  groupedExerciseLogs: [GroupedExerciseLog!]!
  id: ID!
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  startDateTime: LocalDateTime
}

input WorkoutInput {
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  zonedDateTime: String!
}

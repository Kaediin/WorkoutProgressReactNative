"""Indicates an Input Object is a OneOf Input Object."""
directive @oneOf on INPUT_OBJECT

type BiometricsLog {
  dataSource: ExternalHealthProvider
  id: ID!
  logDate: LocalDateTime!
  type: BiometricsType!
  value: Float!
}

input BiometricsLogInput {
  dataSource: ExternalHealthProvider
  logDate: String!
  type: BiometricsType!
  unit: LogUnit!
  value: Float!
}

enum BiometricsType {
  WEIGHT
}

type CognitoUser {
  createdDate: String
  email: String!
  family_name: String!
  gender: String
  given_name: String!
  locale: String!
  middle_name: String
  name: String!
  nickname: String!
  userName: String!
  zoneinfo: String!
}

type Exercise {
  defaultAppliedWeight: LogValue
  id: ID!
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
  user: User
}

input ExerciseInput {
  defaultAppliedWeight: LogValueInput
  name: String!
  notes: String
  primaryMuscles: [MuscleGroup]
  secondaryMuscles: [MuscleGroup]
}

type ExerciseLineChartData {
  logs: [ExerciseLog!]!
  monthLabel: String!
}

type ExerciseLog {
  effort: Int
  exercise: Exercise!
  id: ID!
  logDateTime: LocalDateTime!
  logValue: LogValue!
  programWorkoutLog: ProgramWorkoutLog
  remark: String
  repetitions: Float!
  user: User!
  warmup: Boolean
  workout: Workout!
}

input ExerciseLogInput {
  effort: Int
  exerciseId: String!
  logValue: LogValueInput!
  remark: String
  repetitions: Float!
  warmup: Boolean!
  zonedDateTimeString: String!
}

enum ExternalHealthProvider {
  APPLE_HEALTH
}

type ExternalHealthProviderData {
  appleHealthId: ID!
  provider: ExternalHealthProvider!
}

input ExternalHealthProviderDataInput {
  appleHealthId: ID!
  provider: ExternalHealthProvider!
}

type GroupedExerciseLog {
  exercise: Exercise!
  logs: [ExerciseLog!]!
}

"""A Java LocalDateTime type"""
scalar LocalDateTime

enum LogUnit {
  FT
  KG
  KM
  LBS
  M
  MI
  MIN
  SEC
  YD
}

type LogValue {
  base: Int!
  fraction: Int
  unit: LogUnit!
}

input LogValueInput {
  base: Int!
  fraction: Int
  unit: LogUnit!
}

enum MuscleGroup {
  ABDUCTOR
  ABS
  ADDUCTOR
  BACK_SHOULDERS
  BICEPS
  CALVES
  CHEST
  FOREARMS
  FRONT_SHOULDERS
  GLUTES
  HAMSTRINGS
  HANDS
  LATS
  LOWER_BACK
  NECK
  OBLIQUES
  QUADS
  SHINS
  TRICEPS
  UPPER_BACK
}

type MuscleGroupChartData {
  color: String!
  count: Int!
  muscleGroup: MuscleGroup!
}

type Mutation {
  """Add calories burned to workout"""
  addEstimatedCaloriesBurned(estimatedCaloriesBurned: Float!, workoutId: ID!): Workout!
  addExerciseLog(autoAdjust: Boolean!, input: ExerciseLogInput!, workoutId: ID!): Workout

  """Add external health provider data to workout"""
  addExternalHealthProviderData(input: ExternalHealthProviderDataInput!, workoutId: ID!): Workout!
  addOnboardingExercises(ids: [String!]!): Boolean
  completeOnboarding: User!
  createExercise(input: ExerciseInput): Exercise
  createProgram(input: ProgramInput): Program!
  createProgramLog(input: ProgramLogInput): ProgramLog!
  createProgramLogGroup(input: ProgramLogGroupInput): ProgramLogGroup!
  createUser(userInput: UserInput!): User
  deleteExercise(id: ID!): Boolean!
  deleteProgram(id: ID!): Boolean!
  deleteProgramLog(id: ID!): Boolean!
  deleteProgramLogGroup(id: ID!): Boolean!
  deleteScheduledProgram(id: ID!): Boolean!

  """Delete workout by ID"""
  deleteWorkout(id: ID!): Boolean
  endScheduledProgram(id: ID!, zonedDateTimeString: String!): Boolean!

  """End workout by ID"""
  endWorkout(workoutId: ID!, zonedDateTimeString: String!): Workout
  logBiometrics(biometricsLogInput: BiometricsLogInput!): User!
  markLogAsCompleted(id: ID!, workoutId: String!, zonedDateTimeString: String!): ProgramLog!

  """Start a new workout for me"""
  meStartWorkout(input: WorkoutInput!): Workout
  reLogLatestLog(autoAdjust: Boolean!, workoutId: ID!, zonedDateTimeString: String!): Workout
  reLogLog(input: ExerciseLogInput!, workoutId: ID!): Workout
  removeExerciseLog(autoAdjust: Boolean!, exerciseLogId: String!): Boolean!

  """
  Restart workout by ID. This only removes end date and set active to false
  """
  restartWorkout(id: ID!): Workout!
  runFetchWorkoutsTask: Boolean
  scheduleProgram(input: ScheduledProgramInput!): ScheduledProgram!
  startScheduledProgram(id: ID!, zonedDateTimeString: String!): Boolean!
  updateExercise(id: ID!, input: ExerciseInput): Exercise
  updateExerciseLog(exerciseLogId: ID!, input: ExerciseLogInput!): Workout
  updateMyPreference(input: PreferenceInput!): Preference!
  updateProgram(id: ID!, input: ProgramInput): Program!
  updateProgramLog(id: ID!, input: ProgramLogInput): ProgramLog!
  updateProgramLogGroup(id: ID!, type: ProgramLogGroupType): ProgramLogGroup!
  updateScheduledProgram(id: ID!, input: ScheduledProgramInput!): ScheduledProgram!

  """Update workout by ID"""
  updateWorkout(id: ID!, input: WorkoutInput!): Workout!
}

type Preference {
  autoAdjustWorkoutMuscleGroups: Boolean
  autoStartTimer: Boolean
  defaultRepetitions: Int
  distanceUnit: LogUnit
  hideUnitSelector: Boolean
  playTimerCompletionSound: Boolean
  timerDuration: Int
  weightUnit: LogUnit
}

input PreferenceInput {
  autoAdjustWorkoutMuscleGroups: Boolean
  autoStartTimer: Boolean
  defaultRepetitions: Int
  distanceUnit: LogUnit
  hideUnitSelector: Boolean
  playTimerCompletionSound: Boolean
  timerDuration: Int
  weightUnit: LogUnit
}

type Program {
  active: Boolean!

  """The date and time when the program was created."""
  createdDateTime: LocalDateTime!

  """The estimated calories burned by the program."""
  estimatedCaloriesBurned: Int

  """The external health provider data. (e.g. Apple Health)"""
  externalHealthProviderData: ExternalHealthProviderData
  id: ID!

  """The groups of the program."""
  logGroups: [ProgramLogGroup!]!
  name: String!
  remark: String
}

input ProgramInput {
  name: String!
  remark: String
  zonedDateTime: String!
}

type ProgramLog {
  """Cooldown in seconds."""
  cooldownSeconds: Int

  """Effort on scale of 1 to 100"""
  effort: Int
  exercise: Exercise

  """The exercise log of the program log."""
  exerciseLog: ExerciseLog
  id: ID

  """Interval in seconds."""
  intervalSeconds: Int
  logValue: LogValue!

  """The program attached"""
  program: Program

  """The program log group of the program log."""
  programLogGroup: ProgramLogGroup
  repetitions: Int!

  """The subdivision of the program log."""
  subdivisions: [ProgramLog!]
}

type ProgramLogGroup {
  id: ID!
  logs: [ProgramLog!]!
  program: Program!
  type: ProgramLogGroupType!
}

input ProgramLogGroupInput {
  logs: [ProgramLogInput!]!
  programId: ID!
  type: ProgramLogGroupType!
}

enum ProgramLogGroupType {
  COOLDOWN
  MAIN
  WARMUP
}

input ProgramLogInput {
  cooldownSeconds: Int
  effort: Int
  exerciseId: ID
  intervalSeconds: Int
  logValue: LogValueInput!
  programLogGroupId: ID!
  repetitions: Int!
  subdivisions: [ProgramLogInput!]
}

type ProgramWorkout {
  groups: [ProgramWorkoutGroup!]!
  id: ID!
  program: Program!
  workout: Workout!
}

type ProgramWorkoutGroup {
  id: ID!
  programWorkout: ProgramWorkout!
  programWorkoutLogs: [ProgramWorkoutLog!]!
  type: ProgramLogGroupType!
}

type ProgramWorkoutLog {
  id: ID!

  """The original program log of the scheduled program."""
  originalProgramLog: ProgramLog!

  """The program log of the scheduled program. (target log)"""
  programLog: ProgramLog!
  programWorkout: ProgramWorkout!
  programWorkoutGroup: ProgramWorkoutGroup!
}

type Query {
  """Get all logs by excerice id"""
  allLogsByExerciseId(exerciseId: ID!): [ExerciseLog!]!

  """
  Get chart data per muscle group for all workouts of user by current month with given timestamp
  """
  chartDataMuscleGroups(zonedDateTimeString: String): [MuscleGroupChartData!]!

  """Get chart data of last x months for logs by exercise id"""
  chartDataOfXMonthsByExerciseId(exerciseId: ID!, months: Int!, zonedDateTimeString: String!): [ExerciseLineChartData!]!
  checkAppVersion: Boolean!

  """Count my workouts"""
  countMyWorkouts: Int!

  """Get total time of all workouts"""
  countTotalTimeAllMyWorkoutsInMinutes: Float!

  """Get all of the latest logs by exercise id from the same workout"""
  latestLogsByExerciseId(exerciseId: ID!): [ExerciseLog]

  """
  Get all of the latest logs by exercise id from the same workout except given workout Id
  """
  latestLogsByExerciseIdAndNotWorkoutId(exerciseId: ID!, workoutId: String!): [ExerciseLog]
  me: User

  """Check if me has an active workout ie. one that hasn't ended yet"""
  meHasActiveWorkout: Boolean!
  myExercises: [Exercise!]
  myPreference: Preference

  """Fetch all my programs"""
  myPrograms: [Program!]

  """Fetch all my scheduled programs"""
  myScheduledPrograms: [ScheduledProgram!]

  """Fetch all my current workouts"""
  myWorkouts: [Workout!]
  onboardingExercises: [Exercise!]!

  """Fetch program by ID"""
  programById(id: ID!): Program

  """Fetch all program log groups by program ID"""
  programLogGroupsByProgramId(programId: ID!): [ProgramLogGroup!]

  """Fetch scheduled program by ID"""
  scheduledProgramById(id: ID!): ScheduledProgram
  userById(id: String!): User
  users: [User]

  """Fetch workout by ID"""
  workoutById(id: ID!): Workout

  """Fetch all workouts of user by current month with given timestamp"""
  workoutsOfCurrentMonth(zonedDateTimeString: String!): [Workout!]!
}

type ScheduledProgram {
  """The date and time when the program is created."""
  createdDateTime: LocalDateTime!

  """The date and time when the program is ended."""
  endedDateTime: LocalDateTime
  id: ID!
  programWorkout: ProgramWorkout!

  """The date and time when the program is scheduled for."""
  scheduledDateTime: LocalDateTime!

  """The date and time when the program is started."""
  startDateTime: LocalDateTime
  user: User!
}

input ScheduledProgramInput {
  programId: ID!
  remark: String
  scheduleZonedDateTime: String!
  workoutName: String!
  zonedDateTime: String!
}

type User {
  cognitoUser: CognitoUser!
  fid: String!
  id: ID!
  onboardingCompleted: Boolean
  weight: BiometricsLog
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  middleName: String!
  password: String!
}

type Workout {
  active: Boolean
  endDateTime: LocalDateTime
  estimatedCaloriesBurned: Float
  exerciseLogs: [ExerciseLog!]!
  externalHealthProviderData: ExternalHealthProviderData
  groupedExerciseLogs: [GroupedExerciseLog!]!
  id: ID!
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  startDateTime: LocalDateTime
  status: WorkoutStatus!
}

input WorkoutInput {
  muscleGroups: [MuscleGroup!]!
  name: String!
  remark: String
  zonedDateTime: String!
}

enum WorkoutStatus {
  ENDED
  SCHEDULED
  STARTED
}
